import { defineNuxtModule, createResolver, addComponent, addTemplate } from '@nuxt/kit';
import { readdir } from 'fs/promises';
import { join } from 'path';

const module = defineNuxtModule({
  meta: {
    name: "nuxt-phosphor-icons",
    configKey: "phosphor",
    compatibility: {
      nuxt: "^3.0.0"
    }
  },
  // Default configuration options of the Nuxt module
  defaults: {
    expose: false,
    prefix: "phosphor-icon",
    showList: false
  },
  async setup(options) {
    const { resolve, resolvePath } = createResolver(import.meta.url);
    const source = resolve(
      await resolvePath("@phosphor-icons/vue"),
      "../icons"
    );
    const icons = await readdir(source);
    const compatibleComponents = icons.filter(
      (file) => file.endsWith(".vue.mjs")
    );
    const prefix = options.prefix.includes("-") ? options.prefix.split("-").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join("") : options.prefix.charAt(0).toUpperCase() + options.prefix.slice(1);
    const componentList = [];
    for (const component of compatibleComponents) {
      const name = component.replace(".vue.mjs", "").replace("Ph", prefix);
      addComponent({
        filePath: join(source, component),
        global: options.expose,
        name
      });
      componentList.push(name);
    }
    if (options.showList) {
      addTemplate({
        filename: "nuxt-phosphor-icons.json",
        getContents: () => JSON.stringify(componentList),
        write: true
      });
    }
  }
});

export { module as default };
